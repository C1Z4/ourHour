/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OrgIdRouteRouteImport } from './routes/$orgId/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as OrgIdIndexRouteImport } from './routes/$orgId/index'
import { Route as OrgIdProjectIndexRouteImport } from './routes/$orgId/project/index'
import { Route as OrgIdChatIndexRouteImport } from './routes/$orgId/chat/index'
import { Route as OrgIdBoardIndexRouteImport } from './routes/$orgId/board/index'
import { Route as OrgIdChatRoomIdRouteImport } from './routes/$orgId/chat/$roomId'
import { Route as OrgIdProjectProjectIdIndexRouteImport } from './routes/$orgId/project/$projectId/index'
import { Route as OrgIdProjectProjectIdInfoRouteImport } from './routes/$orgId/project/$projectId/info'
import { Route as OrgIdProjectProjectIdIssueCreateRouteImport } from './routes/$orgId/project/$projectId/issue/create'
import { Route as OrgIdProjectProjectIdIssueIssueIdRouteImport } from './routes/$orgId/project/$projectId/issue/$issueId'
import { Route as OrgIdProjectProjectIdIssueEditIssueIdRouteImport } from './routes/$orgId/project/$projectId/issue/edit/$issueId'

const OrgIdRouteRoute = OrgIdRouteRouteImport.update({
  id: '/$orgId',
  path: '/$orgId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgIdIndexRoute = OrgIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrgIdRouteRoute,
} as any)
const OrgIdProjectIndexRoute = OrgIdProjectIndexRouteImport.update({
  id: '/project/',
  path: '/project/',
  getParentRoute: () => OrgIdRouteRoute,
} as any)
const OrgIdChatIndexRoute = OrgIdChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => OrgIdRouteRoute,
} as any)
const OrgIdBoardIndexRoute = OrgIdBoardIndexRouteImport.update({
  id: '/board/',
  path: '/board/',
  getParentRoute: () => OrgIdRouteRoute,
} as any)
const OrgIdChatRoomIdRoute = OrgIdChatRoomIdRouteImport.update({
  id: '/chat/$roomId',
  path: '/chat/$roomId',
  getParentRoute: () => OrgIdRouteRoute,
} as any)
const OrgIdProjectProjectIdIndexRoute =
  OrgIdProjectProjectIdIndexRouteImport.update({
    id: '/project/$projectId/',
    path: '/project/$projectId/',
    getParentRoute: () => OrgIdRouteRoute,
  } as any)
const OrgIdProjectProjectIdInfoRoute =
  OrgIdProjectProjectIdInfoRouteImport.update({
    id: '/project/$projectId/info',
    path: '/project/$projectId/info',
    getParentRoute: () => OrgIdRouteRoute,
  } as any)
const OrgIdProjectProjectIdIssueCreateRoute =
  OrgIdProjectProjectIdIssueCreateRouteImport.update({
    id: '/project/$projectId/issue/create',
    path: '/project/$projectId/issue/create',
    getParentRoute: () => OrgIdRouteRoute,
  } as any)
const OrgIdProjectProjectIdIssueIssueIdRoute =
  OrgIdProjectProjectIdIssueIssueIdRouteImport.update({
    id: '/project/$projectId/issue/$issueId',
    path: '/project/$projectId/issue/$issueId',
    getParentRoute: () => OrgIdRouteRoute,
  } as any)
const OrgIdProjectProjectIdIssueEditIssueIdRoute =
  OrgIdProjectProjectIdIssueEditIssueIdRouteImport.update({
    id: '/project/$projectId/issue/edit/$issueId',
    path: '/project/$projectId/issue/edit/$issueId',
    getParentRoute: () => OrgIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$orgId': typeof OrgIdRouteRouteWithChildren
  '/$orgId/': typeof OrgIdIndexRoute
  '/login': typeof LoginIndexRoute
  '/$orgId/chat/$roomId': typeof OrgIdChatRoomIdRoute
  '/$orgId/board': typeof OrgIdBoardIndexRoute
  '/$orgId/chat': typeof OrgIdChatIndexRoute
  '/$orgId/project': typeof OrgIdProjectIndexRoute
  '/$orgId/project/$projectId/info': typeof OrgIdProjectProjectIdInfoRoute
  '/$orgId/project/$projectId': typeof OrgIdProjectProjectIdIndexRoute
  '/$orgId/project/$projectId/issue/$issueId': typeof OrgIdProjectProjectIdIssueIssueIdRoute
  '/$orgId/project/$projectId/issue/create': typeof OrgIdProjectProjectIdIssueCreateRoute
  '/$orgId/project/$projectId/issue/edit/$issueId': typeof OrgIdProjectProjectIdIssueEditIssueIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$orgId': typeof OrgIdIndexRoute
  '/login': typeof LoginIndexRoute
  '/$orgId/chat/$roomId': typeof OrgIdChatRoomIdRoute
  '/$orgId/board': typeof OrgIdBoardIndexRoute
  '/$orgId/chat': typeof OrgIdChatIndexRoute
  '/$orgId/project': typeof OrgIdProjectIndexRoute
  '/$orgId/project/$projectId/info': typeof OrgIdProjectProjectIdInfoRoute
  '/$orgId/project/$projectId': typeof OrgIdProjectProjectIdIndexRoute
  '/$orgId/project/$projectId/issue/$issueId': typeof OrgIdProjectProjectIdIssueIssueIdRoute
  '/$orgId/project/$projectId/issue/create': typeof OrgIdProjectProjectIdIssueCreateRoute
  '/$orgId/project/$projectId/issue/edit/$issueId': typeof OrgIdProjectProjectIdIssueEditIssueIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$orgId': typeof OrgIdRouteRouteWithChildren
  '/$orgId/': typeof OrgIdIndexRoute
  '/login/': typeof LoginIndexRoute
  '/$orgId/chat/$roomId': typeof OrgIdChatRoomIdRoute
  '/$orgId/board/': typeof OrgIdBoardIndexRoute
  '/$orgId/chat/': typeof OrgIdChatIndexRoute
  '/$orgId/project/': typeof OrgIdProjectIndexRoute
  '/$orgId/project/$projectId/info': typeof OrgIdProjectProjectIdInfoRoute
  '/$orgId/project/$projectId/': typeof OrgIdProjectProjectIdIndexRoute
  '/$orgId/project/$projectId/issue/$issueId': typeof OrgIdProjectProjectIdIssueIssueIdRoute
  '/$orgId/project/$projectId/issue/create': typeof OrgIdProjectProjectIdIssueCreateRoute
  '/$orgId/project/$projectId/issue/edit/$issueId': typeof OrgIdProjectProjectIdIssueEditIssueIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$orgId'
    | '/$orgId/'
    | '/login'
    | '/$orgId/chat/$roomId'
    | '/$orgId/board'
    | '/$orgId/chat'
    | '/$orgId/project'
    | '/$orgId/project/$projectId/info'
    | '/$orgId/project/$projectId'
    | '/$orgId/project/$projectId/issue/$issueId'
    | '/$orgId/project/$projectId/issue/create'
    | '/$orgId/project/$projectId/issue/edit/$issueId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$orgId'
    | '/login'
    | '/$orgId/chat/$roomId'
    | '/$orgId/board'
    | '/$orgId/chat'
    | '/$orgId/project'
    | '/$orgId/project/$projectId/info'
    | '/$orgId/project/$projectId'
    | '/$orgId/project/$projectId/issue/$issueId'
    | '/$orgId/project/$projectId/issue/create'
    | '/$orgId/project/$projectId/issue/edit/$issueId'
  id:
    | '__root__'
    | '/'
    | '/$orgId'
    | '/$orgId/'
    | '/login/'
    | '/$orgId/chat/$roomId'
    | '/$orgId/board/'
    | '/$orgId/chat/'
    | '/$orgId/project/'
    | '/$orgId/project/$projectId/info'
    | '/$orgId/project/$projectId/'
    | '/$orgId/project/$projectId/issue/$issueId'
    | '/$orgId/project/$projectId/issue/create'
    | '/$orgId/project/$projectId/issue/edit/$issueId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrgIdRouteRoute: typeof OrgIdRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$orgId': {
      id: '/$orgId'
      path: '/$orgId'
      fullPath: '/$orgId'
      preLoaderRoute: typeof OrgIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$orgId/': {
      id: '/$orgId/'
      path: '/'
      fullPath: '/$orgId/'
      preLoaderRoute: typeof OrgIdIndexRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/project/': {
      id: '/$orgId/project/'
      path: '/project'
      fullPath: '/$orgId/project'
      preLoaderRoute: typeof OrgIdProjectIndexRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/chat/': {
      id: '/$orgId/chat/'
      path: '/chat'
      fullPath: '/$orgId/chat'
      preLoaderRoute: typeof OrgIdChatIndexRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/board/': {
      id: '/$orgId/board/'
      path: '/board'
      fullPath: '/$orgId/board'
      preLoaderRoute: typeof OrgIdBoardIndexRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/chat/$roomId': {
      id: '/$orgId/chat/$roomId'
      path: '/chat/$roomId'
      fullPath: '/$orgId/chat/$roomId'
      preLoaderRoute: typeof OrgIdChatRoomIdRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/project/$projectId/': {
      id: '/$orgId/project/$projectId/'
      path: '/project/$projectId'
      fullPath: '/$orgId/project/$projectId'
      preLoaderRoute: typeof OrgIdProjectProjectIdIndexRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/project/$projectId/info': {
      id: '/$orgId/project/$projectId/info'
      path: '/project/$projectId/info'
      fullPath: '/$orgId/project/$projectId/info'
      preLoaderRoute: typeof OrgIdProjectProjectIdInfoRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/project/$projectId/issue/create': {
      id: '/$orgId/project/$projectId/issue/create'
      path: '/project/$projectId/issue/create'
      fullPath: '/$orgId/project/$projectId/issue/create'
      preLoaderRoute: typeof OrgIdProjectProjectIdIssueCreateRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/project/$projectId/issue/$issueId': {
      id: '/$orgId/project/$projectId/issue/$issueId'
      path: '/project/$projectId/issue/$issueId'
      fullPath: '/$orgId/project/$projectId/issue/$issueId'
      preLoaderRoute: typeof OrgIdProjectProjectIdIssueIssueIdRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
    '/$orgId/project/$projectId/issue/edit/$issueId': {
      id: '/$orgId/project/$projectId/issue/edit/$issueId'
      path: '/project/$projectId/issue/edit/$issueId'
      fullPath: '/$orgId/project/$projectId/issue/edit/$issueId'
      preLoaderRoute: typeof OrgIdProjectProjectIdIssueEditIssueIdRouteImport
      parentRoute: typeof OrgIdRouteRoute
    }
  }
}

interface OrgIdRouteRouteChildren {
  OrgIdIndexRoute: typeof OrgIdIndexRoute
  OrgIdChatRoomIdRoute: typeof OrgIdChatRoomIdRoute
  OrgIdBoardIndexRoute: typeof OrgIdBoardIndexRoute
  OrgIdChatIndexRoute: typeof OrgIdChatIndexRoute
  OrgIdProjectIndexRoute: typeof OrgIdProjectIndexRoute
  OrgIdProjectProjectIdInfoRoute: typeof OrgIdProjectProjectIdInfoRoute
  OrgIdProjectProjectIdIndexRoute: typeof OrgIdProjectProjectIdIndexRoute
  OrgIdProjectProjectIdIssueIssueIdRoute: typeof OrgIdProjectProjectIdIssueIssueIdRoute
  OrgIdProjectProjectIdIssueCreateRoute: typeof OrgIdProjectProjectIdIssueCreateRoute
  OrgIdProjectProjectIdIssueEditIssueIdRoute: typeof OrgIdProjectProjectIdIssueEditIssueIdRoute
}

const OrgIdRouteRouteChildren: OrgIdRouteRouteChildren = {
  OrgIdIndexRoute: OrgIdIndexRoute,
  OrgIdChatRoomIdRoute: OrgIdChatRoomIdRoute,
  OrgIdBoardIndexRoute: OrgIdBoardIndexRoute,
  OrgIdChatIndexRoute: OrgIdChatIndexRoute,
  OrgIdProjectIndexRoute: OrgIdProjectIndexRoute,
  OrgIdProjectProjectIdInfoRoute: OrgIdProjectProjectIdInfoRoute,
  OrgIdProjectProjectIdIndexRoute: OrgIdProjectProjectIdIndexRoute,
  OrgIdProjectProjectIdIssueIssueIdRoute:
    OrgIdProjectProjectIdIssueIssueIdRoute,
  OrgIdProjectProjectIdIssueCreateRoute: OrgIdProjectProjectIdIssueCreateRoute,
  OrgIdProjectProjectIdIssueEditIssueIdRoute:
    OrgIdProjectProjectIdIssueEditIssueIdRoute,
}

const OrgIdRouteRouteWithChildren = OrgIdRouteRoute._addFileChildren(
  OrgIdRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrgIdRouteRoute: OrgIdRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
