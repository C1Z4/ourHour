name: CI-CD

on:
  push:
    branches: ["develop", "main"]
  pull_request:
    branches: ["develop", "main"]

jobs:
  #-------------------------CI-------------------------
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # Backend 빌드
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set execute permission on gradlew
        run: chmod +x ./gradlew
        working-directory: ./backend

      # 개발 환경용 환경 변수 세팅
      - name: Set environment variables for dev
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "SPRING_PROFILES_ACTIVE=dev" >> $GITHUB_ENV
          echo "DB_URL=${{ secrets.DEV_DB_URL }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DEV_DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> $GITHUB_ENV
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "JWT_ACCESS=${{ secrets.JWT_ACCESS }}" >> $GITHUB_ENV
          echo "JWT_REFRESH=${{ secrets.JWT_REFRESH }}" >> $GITHUB_ENV
          echo "ENCRYPTION_SECRET_KEY=${{ secrets.ENCRYPTION_SECRET_KEY }}" >> $GITHUB_ENV
          echo "APPLICATION_GITHUB_CLIENT_ID=${{ secrets.APPLICATION_GITHUB_CLIENT_ID }}" >> $GITHUB_ENV
          echo "APPLICATION_GITHUB_CLIENT_SECRET=${{ secrets.APPLICATION_GITHUB_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "APPLICATION_GITHUB_REDIRECT_URI=${{ secrets.APPLICATION_GITHUB_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "APPLICATION_GITHUB_SCOPE=${{ secrets.APPLICATION_GITHUB_SCOPE }}" >> $GITHUB_ENV

      # test
      - name: Run Tests with Gradle
        run: ./gradlew test --no-daemon
        working-directory: ./backend

      # test 제외 build
      - name: Build JAR for Deployment
        run: ./gradlew clean bootJar --no-daemon
        working-directory: ./backend

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: ./backend/build/libs/backend-0.0.1-SNAPSHOT.jar

      # Frontend 코드 품질 검사 (Vercel 배포 전 검증용)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run code quality checks
        run: |
          npm run lint &
          npm run format:check &
          wait
        working-directory: ./frontend

      - name: Run tests
        run: npm run coverage
        working-directory: ./frontend

  #-------------------------CD-------------------------
  # Docker 이미지 빌드 및 푸시
  build-docker:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./backend/build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate image tags (docker job)
        id: image-tags
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "backend=ourhour-backend:prod-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "backend=ourhour-backend:dev-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          target: release
          push: true
          tags: ${{ (secrets.DOCKER_USERNAME != '' && format('{0}/{1}', secrets.DOCKER_USERNAME, steps['image-tags'].outputs.backend)) || format('myuser/{0}', steps['image-tags'].outputs.backend) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  # 배포 태스트용 Docker (develop 브랜치)
  deploy-docker-dev:
    needs: [ build-test, build-docker ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
      - name: Deploy with Docker to Development
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/ourHour
            
            git fetch --all && git checkout develop && git reset --hard origin/develop
            
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            docker compose -f docker-compose.yml -f docker-compose.release.yml down || true
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/ourhour-backend:dev-${{ github.sha }}
            
            export BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/ourhour-backend:dev-${{ github.sha }}
            
            export SPRING_PROFILES_ACTIVE=test

            export BACKEND_PORT=8081
            
            docker compose -f docker-compose.yml -f docker-compose.release.yml up -d
            
            docker image prune -f
            

  # 배포용 Docker (main 브랜치)
  deploy-docker-prod:
    needs: [build-test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Deploy with Docker to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 애플리케이션 디렉토리로 이동
            cd /home/ubuntu/ourHour

            # Git 최신 코드 가져오기
            git fetch --all && git checkout main && git reset --hard origin/main

            # Docker 로그인
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # 기존 컨테이너 중지 및 제거
            docker compose -f docker-compose.yml -f docker-compose.dev.yml down || true
            docker compose -f docker-compose.yml -f docker-compose.release.yml down || true

            # 최신 이미지 풀
            docker pull ${{ secrets.DOCKER_USERNAME }}/ourhour-backend:prod-${{ github.sha }}

            export BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/ourhour-backend:prod-${{ github.sha }}
            
            # 환경변수 설정 (프로덕션 - AWS Parameter Store 사용)
            export SPRING_PROFILES_ACTIVE=release
            
            # 새 컨테이너 시작 (AWS Parameter Store에서 환경변수 자동 로드)
            docker compose -f docker-compose.yml -f docker-compose.release.yml up -d

            # 불필요한 이미지 정리
            docker image prune -f